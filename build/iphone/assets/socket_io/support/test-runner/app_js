function handler(e,t){fs.readFile(__dirname+"/../../dist/socket.io.js","utf8",function(e,o){return e?(t.writeHead(404),t.end("Error"),void 0):(t.writeHead(200,{"Content-Type":"application/javascript"}),t.end(o),void 0)})}function suite(e,t){currentSuite=testsPorts[e]={},t()}function server(e,t){currentSuite[e]=port;var o=sio.listen(port);o.configure(function(){o.set("transports",[transport])}),t(o),port++}var express=require("express"),stylus=require("stylus"),sio=require("socket.io"),path=require("path"),fs=require("fs"),app=express.createServer(),port=3e3,args=process.argv.slice(2),transport=args.length?args[0]:"xhr-polling",testsPorts={};app.configure(function(){app.use(stylus.middleware({src:__dirname+"/public"})),app.use(express.static(__dirname+"/public")),app.use("/test",express.static(__dirname+"/../../test")),app.set("views",__dirname),app.set("view engine","jade")}),app.get("/",function(e,t){t.render("index",{layout:!1,testsPorts:testsPorts,transport:transport})}),app.listen(port++,function(){var e=app.address();console.error("   listening on http://"+e.address+":"+e.port)});var io=sio.listen(app);io.configure(function(){io.set("browser client handler",handler),io.set("transports",[transport])});var currentSuite;suite("socket.test.js",function(){server("test connecting the socket and disconnecting",function(e){e.sockets.on("connection",function(){})}),server("test receiving messages",function(e){e.sockets.on("connection",function(e){var t=0,o=setInterval(function(){e.send(++t),3==t&&(clearInterval(o),setTimeout(function(){e.disconnect()},500))},50)})}),server("test sending messages",function(e){e.sockets.on("connection",function(e){e.on("message",function(t){e.send(t)})})}),server("test acks sent from client",function(e){e.sockets.on("connection",function(e){e.send("tobi",function(){e.send("tobi 2")})})}),server("test acks sent from server",function(e){e.sockets.on("connection",function(){})}),server("test connecting to namespaces",function(e){e.of("/woot").on("connection",function(e){e.send("connected to woot")}),e.of("/chat").on("connection",function(e){e.send("connected to chat")})}),server("test disconnecting from namespaces",function(e){e.of("/a").on("connection",function(){}),e.of("/b").on("connection",function(){})}),server("test authorizing for namespaces",function(e){e.of("/a").authorization(function(e,t){t(null,!1)}).on("connection",function(){})}),server("test sending json from server",function(e){e.sockets.on("connection",function(){e.sockets.json.send(3141592)})}),server("test sending json from client",function(e){e.sockets.on("connection",function(e){e.on("message",function(t){Array.isArray(t)&&3==t.length&&e.send("echo")})})}),server("test emitting an event from server",function(e){e.sockets.on("connection",function(e){e.emit("woot")})}),server("test emitting multiple events at once to the server",function(e){e.sockets.on("connection",function(e){var t=[];e.on("print",function(o){t.indexOf(o)>=0&&console.error("duplicate message"),t.push(o),2==t.length&&e.emit("done")})})}),server("test emitting an event to server",function(e){e.sockets.on("connection",function(e){e.on("woot",function(){e.emit("echo")})})}),server("test emitting an event from server and sending back data",function(e){e.sockets.on("connection",function(e){e.emit("woot",1,function(t){"test"===t&&e.emit("done")})})}),server("test emitting an event to server and sending back data",function(e){e.sockets.on("connection",function(e){e.on("tobi",function(e,t,o){1===e&&2===t&&o({hello:"world"})})})}),server("test encoding a payload",function(e){e.of("/woot").on("connection",function(e){var t=0;e.on("message",function(o){"ñ"==o&&4==++t&&e.emit("done")})})}),server("test sending query strings to the server",function(e){e.sockets.on("connection",function(e){e.json.send(e.handshake)})}),server("test sending newline",function(e){e.sockets.on("connection",function(e){e.on("message",function(t){"\n"==t&&e.emit("done")})})}),server("test sending unicode",function(e){e.sockets.on("connection",function(e){e.on("message",function(t){"☃"==t.test&&e.emit("done")})})}),server("test webworker connection",function(e){e.sockets.on("connection",function(e){e.on("message",function(t){"woot"==t&&e.emit("done")})})})});